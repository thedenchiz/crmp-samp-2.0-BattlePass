#include <a_samp>
#include <socket> 
#include <sscanf2> // Требуется для расширенного парсинга
#include <string> // Для безопасных строковых операций

#define BP_SERVER_IP "127.0.0.1"
#define BP_SERVER_PORT 8888
#define MAX_BP_CMD_LENGTH 256
#define BP_PING_INTERVAL 60000

enum E_PLAYER_BP_DATA {
    bpLevel,
    bpXP,
    bpSocket,
    bool:bpLoaded,
    bool:bpConnecting,
    bpLastPing
}

new PlayerBPData[MAX_PLAYERS][E_PLAYER_BP_DATA];

public OnGameModeInit() {
    SetTimer("BP_PingCheck", BP_PING_INTERVAL, true);
    return 1;
}

public OnPlayerConnect(playerid) {
    // Инициализация данных
    PlayerBPData[playerid][bpSocket] = -1;
    PlayerBPData[playerid][bpLoaded] = false;
    PlayerBPData[playerid][bpConnecting] = false;
    
    // Асинхронное подключение
    new err = socket_create(PlayerBPData[playerid][bpSocket], SOCKET_TYPE_TCP);
    if(err == 0) {
        PlayerBPData[playerid][bpConnecting] = true;
        socket_connect(PlayerBPData[playerid][bpSocket], BP_SERVER_IP, BP_SERVER_PORT);
    } else {
        SendClientMessage(playerid, 0xFF0000AA, "Ошибка инициализации Battle Pass");
        printf("[BP] Socket creation failed for player %d (error %d)", playerid, err);
    }
    return 1;
}

public OnPlayerDisconnect(playerid, reason) {
    if(PlayerBPData[playerid][bpSocket] != -1) {
        if(PlayerBPData[playerid][bpLoaded]) {
            new cmd[MAX_BP_CMD_LENGTH];
            format(cmd, sizeof(cmd), "SAVE:%d:%d:%d", 
                playerid, 
                PlayerBPData[playerid][bpLevel], 
                PlayerBPData[playerid][bpXP]);
            SocketSendSafe(playerid, cmd);
        }
        socket_close(PlayerBPData[playerid][bpSocket]);
        PlayerBPData[playerid][bpSocket] = -1;
    }
    return 1;
}

SocketSendSafe(playerid, const command[]) {
    if(PlayerBPData[playerid][bpSocket] == -1) return 0;
    
    new safeCommand[MAX_BP_CMD_LENGTH];
    strcat(safeCommand, command, sizeof(safeCommand));
    
    // Экранирование специальных символов
    strreplace(safeCommand, ':', '_');
    strreplace(safeCommand, '\r', ' ');
    strreplace(safeCommand, '\n', ' ');
    
    new msg[MAX_BP_CMD_LENGTH+3];
    format(msg, sizeof(msg), "%s\r\n", safeCommand);
    
    return socket_send(PlayerBPData[playerid][bpSocket], msg);
}

public OnSocketConnect(socketid, ip[], port) {
    new playerid = GetPlayerBySocket(socketid);
    if(playerid == INVALID_PLAYER_ID) return;
    
    PlayerBPData[playerid][bpConnecting] = false;
    
    new cmd[MAX_BP_CMD_LENGTH];
    format(cmd, sizeof(cmd), "LOAD:%d", playerid);
    SocketSendSafe(playerid, cmd);
    
    PlayerBPData[playerid][bpLastPing] = gettime();
}

public OnSocketDisconnect(socketid, error) {
    new playerid = GetPlayerBySocket(socketid);
    if(playerid == INVALID_PLAYER_ID) return;
    
    PlayerBPData[playerid][bpLoaded] = false;
    if(error) {
        SendClientMessage(playerid, 0xFF0000AA, "Ошибка соединения с Battle Pass");
        printf("[BP] Disconnect error %d for player %d", error, playerid);
    }
}

public OnSocketReceive(socketid, data[], len) {
    new playerid = GetPlayerBySocket(socketid);
    if(playerid == INVALID_PLAYER_ID) return;
    
    // Обработка пакетов
    new buffer[MAX_BP_CMD_LENGTH];
    strcat(buffer, data, len < sizeof(buffer) ? len : sizeof(buffer));
    
    new cmd[20], response[MAX_BP_CMD_LENGTH];
    if(sscanf(buffer, "p<:>s[20]s[128]", cmd, response)) return;
    
    if(strcmp(cmd, "LEVEL", true) == 0) {
        new pid, level;
        if(sscanf(response, "p<:>ii", pid, level) == 0 && pid == playerid) {
            PlayerBPData[playerid][bpLevel] = level;
        }
    }
    else if(strcmp(cmd, "XP", true) == 0) {
        new pid, xp;
        if(sscanf(response, "p<:>ii", pid, xp) == 0 && pid == playerid) {
            PlayerBPData[playerid][bpXP] = xp;
        }
    }
    else if(strcmp(cmd, "PONG", true) == 0) {
        PlayerBPData[playerid][bpLastPing] = gettime();
    }
    else if(strcmp(cmd, "ERROR", true) == 0) {
        printf("[BP Error] Player %d: %s", playerid, response);
        SendClientMessage(playerid, 0xFF0000AA, response);
    }
    
    // Проверка полной загрузки
    if(!PlayerBPData[playerid][bpLoaded] && strlen(response) > 0) {
        PlayerBPData[playerid][bpLoaded] = true;
        OnBattlePassLoaded(playerid);
    }
}

forward OnBattlePassLoaded(playerid);
public OnBattlePassLoaded(playerid) {
    new msg[128];
    format(msg, sizeof(msg), "Battle Pass загружен! Уровень: %d, XP: %d", 
        PlayerBPData[playerid][bpLevel], 
        PlayerBPData[playerid][bpXP]);
    SendClientMessage(playerid, 0x00FF00AA, msg);
}

public OnPlayerFinishQuest(playerid, quest_type[], progress) {
    if(PlayerBPData[playerid][bpLoaded]) {
        new cmd[MAX_BP_CMD_LENGTH];
        format(cmd, sizeof(cmd), "EVENT:%d:%s:%d", 
            playerid, 
            quest_type, 
            progress);
        SocketSendSafe(playerid, cmd);
    }
    return 1;
}

forward BP_PingCheck();
public BP_PingCheck() {
    new currentTime = gettime();
    foreach(new i : Player) {
        if(PlayerBPData[i][bpSocket] != -1 && currentTime - PlayerBPData[i][bpLastPing] > 120) {
            SendClientMessage(i, 0xFF0000AA, "Теряем соединение с Battle Pass...");
            socket_reconnect(PlayerBPData[i][bpSocket]);
        }
        SocketSendSafe(i, "PING:%d", i);
    }
}

stock GetPlayerBySocket(socketid) {
    foreach(new i : Player) {
        if(PlayerBPData[i][bpSocket] == socketid) {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock strreplace(string[], search, replacement, bool:global = true) {
    new count;
    for(new i = 0; string[i] != '\0'; i++) {
        if(string[i] == search) {
            string[i] = replacement;
            if(!global) break;
            count++;
        }
    }
    return count;
}
